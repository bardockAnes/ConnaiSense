---
import Layout from '../../../layouts/Layout.astro';
---

<Layout favicon='../../../favicon.svg'>
    <section class="textSection">
        <div class="textDev">
            <div class="start">
                        <h1>المشتقة</h1>
                        <h2>مفهومها وتطبيقاتها</h2>
                        المشتقة هي سرعة التغير اللحظي <br>
                        سرعة التغير : تغير<span  class="y"></span>بالنسبة ل<span  class="x"></span> <br>
                        اللحظي : في لحظة معينة اي في<span  class="x"></span>معين<br>
                        اذن المشتقة هي سرعة التغير اللحظي لدالة ما في نقطة محددة. تساعدنا على معرفة إتجاه الدالة في تلك النقطة، سواء كانت ترتفع، تنخفض، أو تبقى ثابتة كيف ذالك ؟ من خلال معرفة قيمة<span class="mfx"></span>إذا كانت قيمة  موجبة 2 ، فإن الدالة ترتفع. إذا كانت قيمتها سالبة 1- ، فإنها تنخفض. وإذا كانت مساوية للصفر ، فإنها تبقى ثابتة.</p>
                        <h2>الحساب</h2>
                        <div class="plotandtext">
                            <div class="hisab ">
                            <p>علينا فهم طريقة حساب الاشتقاقية , هذا هو قانون الاشتقاق <br><span class="aliashtiqaq"></span>بكل بساطة نحسب الفرق بين النقطة الاولى و التانية التي بعدها
                            <br>ان كان  الفرق موجب يعني ان النقطة التانية في الدالة اكبر من الاولى و الدالة متزايدة
                            <div class="moujab"><canvas  id="moujab"> </canvas></div>
                            ان كان  الفرق سالب يعني ان النقطة التانية في الدالة اصغر من الاولى و الدالة متناقصة
                            <div class="salib" ><canvas id="salib"> </canvas></div>
                            <br>ان كان الفرق صفر الدالة ثابة
                            <div class="tabit" ><canvas id="tabit"> </canvas></div>
                            </p>
                            </div>
                            <div class="plot">
                                 <canvas class="polt" id="PO" width="600" height="400"></canvas>
                            </div>
                        </div>
                        <h2>عندما تؤل <span class="x big"></span>الى<span class="x2 big"></span></h2>
                        <p>نقصد بها عندما تقترب النقطتان من بعضهما , بمأننا نبحث عن اتجاه الدالة في نقطة و هذا غير ممكن الاننا نحتاج نقطتان فنحن نأخد نقطتان
                          قريبتان من بعضهما جدا . اما في الشكل التاني <span class="aliashtiqaq2" ></span> ف<span class="h"></span>ترمز للفرق و نقصدبها عندما يكاد الفرق ينعدم و في المقام النقطة الاولى ناقص النقطة التانية التي تبتعد عنها بالفارق الضغير  <span class="h"></span>
                          , في بعض الحلات يكون استعمال الصيغة الاولى افضل و اسرع و العكس صحيح في حالات اخرى
                        </p>
                        <h2 class="st">معادلة المماس​</h2>
                        <p>الاشتقاقية هي معرفة اتجاه الدالة ,
                         لماذا نحتاج الدالة المشتقة من اجل حساب المماس ؟ الاننا بعد معرفة كيف هي الدالة في تلك النقطة بستعمال الميل (الفرق) يمكننا فقط اطالة المستقيم (الميل الصغير جدا بين النقطتان عند حساب الاشتقاقية ) على كامل <span class="x"></span>      
                         الان كل من الدالة المتشتقة و المماس في تلك النقطة يملكان نفس معامل التوجيه (نفس الاتجاه) 
                        , نعرف مسبقا ان المماس هو دالة خطية تكتب على الشكل التالي <span class="yaxb"></span> حيث ان <span class="a"></span> هو معامل التوجيه , اذا نقوم بتعويض 
                        <span class="yfxb"></span> بعد ايجاد <span class="a"></span> نبحث عن <span class="b"></span> , <span class="y"></span> هي نفسها <span class="fx"></span> فقط تختلف طريقة الكتابة , تكتب <span class="fx"></span> الانها تتغير بتغير <span class="x"></span>
                        <span class="bf"></span>  
                        ثم نعوض <span class="b"></span> في معادلة المماس  
                        <span class="yfxf"></span>
                        <span class="mfx"></span> عامل مشترك
                        <span class="ymamas"></span>
                      </p>         
            </div>
        </div>
    </section>
</Layout>










<style>
    *{
       
        padding: 0;

    }
    body{
        font-family: "Tajawal",sans-serif;
        font-weight: 400;
        margin-left: 2%;
        margin-right: 2%;
        margin-bottom: 10vh;

    }
    
    h1{
        font-size: 40px;
        padding: 10px;
        font-weight: 500;
    }
    h2{
        padding: 10px;
        font-weight: 500;
    }
    p{
        margin: 0px;
    }
    .st{
        margin-bottom: 5px;
    }
    .mt{
        margin-top: 5px;
    }
    .x, .y,.h,.a,.b,.fx,.mfx,.x2,.yaxb{
    margin: 0;
    padding: 0;
    font-size: 14px;
    padding-left: 7px;
    padding-right: 7px;
    }
    .big{
      font-size: 22px;
    }
    
    .aliashtiqaq,.aliashtiqaq2,.yfxb,.bf,.yfxf,.ymamas{
       direction: ltr;
       display: flex;
       justify-content:center;
       padding: 20px;
       font-size: 22px;
      }
      .xx2{
        direction: ltr;
       display: flex;
       justify-content: right;
       padding:5px;
       font-size: 16px;
      }
      .yaxb{
       direction: ltr;
       display: inline-flex;
      }
    .start{
        text-align: justify;
   
    }
    .test{
     height: 100vh;
     ;
    }
    .textDev{
        direction: rtl;
    }
    #text {
        direction: rtl;
    }
    #e{
        font-size: large;
        font-weight: 200;
        margin: 20px;
    }
    .plot{
        width: 40%;
    }
    #PO{
        boraliashtiqaq-radius: 7px;
        direction: ltr;
    }
    .plotandtext{
        display: flex;
        justify-content: space-around;
    }
    .hisab{
        width: 40%;
        height: 400px;
        border-radius: 7px;
        text-align: justify;
    }
    .moujab,.salib,.tabit{
      display:none;
      
    }
    @media only screen and (max-width: 600px) {
  body{
    margin: 25px;
  }
  .plotandtext{
    flex-direction: column;
}
.hisab{
    width: 100%;
    height: 100%;
}
.plot{
    width: 80vw;
}
.aliashtiqaq,.aliashtiqaq2,.yfxb,.bf,.yfxf,.ymamas
       direction: ltr;
       display: flex;
       justify-content:center;
       padding: 20px;
       font-size: 16px;
      }
      .textDev{
    text-align: center;
    color: var(--color-4);
    line-height: 20px;
    word-spacing: 5px;
    letter-spacing: 0.4px;
    }
   
}
   
</style>










<script>
import katex from 'katex';
import 'katex/dist/katex.min.css';

import tippy from 'tippy.js';
import 'tippy.js/dist/tippy.css';
import '../../../styles/style.css'

import * as math from 'mathjs';

import Chart from 'chart.js/auto';
import annotationPlugin from 'chartjs-plugin-annotation';
Chart.register(annotationPlugin);


document.querySelectorAll(".y").forEach(element => {
    katex.render("y", element, { throwOnError: false });
});
document.querySelectorAll(".fx").forEach(element => {
    katex.render("f(x)", element, { throwOnError: false });
});
document.querySelectorAll(".mfx").forEach(element => {
    katex.render("f'(x)", element, { throwOnError: false });
});
document.querySelectorAll(".x").forEach(element => {
    katex.render("x", element, { throwOnError: false });
});
document.querySelectorAll(".h").forEach(element => {
    katex.render("h", element, { throwOnError: false });
});
document.querySelectorAll(".a").forEach(element => {
    katex.render("a", element, { throwOnError: false });
});
document.querySelectorAll(".b").forEach(element => {
    katex.render("b", element, { throwOnError: false });
});
document.querySelectorAll(".x2").forEach(element => {
    katex.render("x_{2}", element, { throwOnError: false });
});
document.querySelectorAll(".xx2").forEach(element => {
    katex.render("x-x_{2}", element, { throwOnError: false });
});
document.querySelectorAll(".yaxb").forEach(element => {
    katex.render("y=ax+b", element, { throwOnError: false });
});
document.querySelectorAll(".yfxb").forEach(element => {
    katex.render("y=f'(x_{0})x+b", element, { throwOnError: false });
});
document.querySelectorAll(".bf").forEach(element => {
    katex.render("b=f(x_{0})-x_{0}*f'(x_{0})", element, { throwOnError: false });
});
document.querySelectorAll(".yfxf").forEach(element => {
    katex.render("y=f'(x_{0})x + f(x_{0})-x_{0}*f'(x_{0})", element, { throwOnError: false });
});
document.querySelectorAll(".ymamas").forEach(element => {
    katex.render("y=f'(x_{0})(x-x_{0}) + f(x_{0})", element, { throwOnError: false });
});
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll(".aliashtiqaq2").forEach(element => {
    katex.render("f'(x) = \\lim\\limits_{h \\to 0} \\frac{f(x + h) - f(x)}{h}", element, { throwOnError: false });
  });
});
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll(".aliashtiqaq").forEach(element => {
    katex.render("f'(x) = \\lim\\limits_{x \\to x_{2}} \\frac{f(x) - f(x_{2})}{x-x_{2}}", element, { throwOnError: false });
  });
});


tippy('#e', {
  content: 'هذا سهل',
  trigger: 'click',
  theme: 'light'
});
// Define the range of x values
const xValues: number[] = math.range(-20, 20,0.1).toArray() as number[];

// Evaluate f(x) = x^2 for each x value
const yValues: number[] = xValues.map(x => math.pow(x, 2)) as number[];


// Evaluate f(x) = 3x for each x value
const yValues2: number[] = xValues.map(x => 2 * x); // Array of y values for f(x) = 3x

// Create a line chart using Chart.js
const ctx = document.getElementById('PO') as HTMLCanvasElement;
ctx.height = 400;
const myChart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: xValues,
    datasets: [ {
        label: 'F`(x)',
        data: yValues2,
        borderColor: '#fc49af',
        borderWidth: 1,
        pointStyle: false,
        hidden:true,
      },{
      label: 'F(x)',
      data: yValues,
      borderColor: '#75E6DA',
      borderWidth: 2,
      pointStyle: false,
    }]
  },
  options: {
    plugins: {
      title: {
        display: false,
        text: 'الاشتقاقية',
        font: {
          size: 22,
          family: 'Tajwal',
        },
      }
    },
    responsive: true,
    maintainAspectRatio: false, 
    indexAxis: 'x',
      elements: {
        line: {
          fill: false
        }
      },
    scales: {
      x: {
        type: 'linear',
        position: { y: 0 },
        min:-10,
        max:10,
        ticks: {
                font: {
                        size: 8,
                    },
                color:"white",
                stepSize:2,
                    
            },
            grid: {
       // Set the color of the grid lines
      },

      },
      y: {
        type: 'linear',
        position: 'center',
        beginAtZero: true,
        min: -4, // Set the minimum value of the y scale
        max: 10, // Set the maximum value of the y scale
        ticks: {
                stepSize: 2,
                font: {
                        size: 8,
                    },
                color:"white",
            },
            grid: {
         // Set the color of the grid lines
      },
      }
    }
  }
  
});
// Function to update the derivative values for a range of derivative function coefficients
async function updateDerivativeValuesForRange(rangeStart, rangeEnd, step) {
  for (let coeff = rangeStart; coeff <= rangeEnd; coeff += step) { // Iterate over the range of coefficients with the specified step
    const derivativeValues = xValues.map(x => (coeff * 2)*x ); // Calculate derivative values for the current coefficient
    myChart.data.datasets[0].data = derivativeValues; // Update the derivative values in the chart for the current coefficient
    myChart.update(); // Update the chart
    await new Promise(resolve => setTimeout(resolve, 100)); // Delay for 100 milliseconds
  }
}

// Example usage: Call the updateDerivativeValuesForRange function with the range of coefficients and step size
updateDerivativeValuesForRange(2, 2, 0.1);




// moujab chart 
// Evaluate f(x) = x^2 for each x value
const moujabyValues: number[] = xValues; // y = x
const moujab = document.getElementById('moujab') as HTMLCanvasElement;
const moujabchart = new Chart(moujab, {
  type: 'line',
  data: {
    labels: xValues,
    datasets: [{
      label: 'y = x',
      data: moujabyValues,
      borderColor: 'rgba(255, 99, 132, 1)',
      borderWidth: 1,
      pointStyle: false,
    }]
  },
  options: {
    plugins: {
      annotation: {
        annotations: {
          line1: {
            type: 'line',
            xMin: 2,
            xMax: 2,
            yMin: 0,
            yMax: 2,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          },line2: {
            type: 'line',
            xMin: 1,
            xMax: 1,
            yMin: 0,
            yMax: 1,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          },
        }
      }
    },
    scales: {
      x: {
        type: 'linear',
        position: { y: 0 },
        min:-5,
        max:5,
        ticks: {
                font: {
                        size: 8,
                    },
                color:"white",
                stepSize:1,
                    
            },
            grid: {
       // Set the color of the grid lines
      },

      },
      y: {
        type: 'linear',
        position: 'center',
        beginAtZero: true,
        min: -5, // Set the minimum value of the y scale
        max: 5, // Set the maximum value of the y scale
        ticks: {
                stepSize: 1,
                font: {
                        size: 8,
                    },
                color:"white",
            },
            grid: {
         // Set the color of the grid lines
      },
      }
    }
  }
});



// salib chart 
// Evaluate f(x) = x^2 for each x value
const salibyValues: number[] = xValues.map(x => -x) as number[];
const salib = document.getElementById('salib') as HTMLCanvasElement;
const salibchart = new Chart(salib, {
  type: 'line',
  data: {
    labels: xValues,
    datasets: [{
      label: 'y = -x',
      data: salibyValues,
      borderColor: 'rgba(255, 99, 132, 1)',
      borderWidth: 1,
      pointStyle: false,
    }]
  },
  options: {
    plugins: {
      annotation: {
        annotations: {
          line1: {
            type: 'line',
            xMin: 2,
            xMax: 2,
            yMin: 0,
            yMax: -2,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          },line2: {
            type: 'line',
            xMin: 1,
            xMax: 1,
            yMin: 0,
            yMax: -1,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          },
        }
      }
    },
    scales: {
      x: {
        type: 'linear',
        position: { y: 0 },
        min:-5,
        max:5,
        ticks: {
                font: {
                        size: 8,
                    },
                color:"white",
                stepSize:1,
                    
            },
            grid: {
       // Set the color of the grid lines
      },

      },
      y: {
        type: 'linear',
        position: 'center',
        beginAtZero: true,
        min: -5, // Set the minimum value of the y scale
        max: 5, // Set the maximum value of the y scale
        ticks: {
                stepSize: 1,
                font: {
                        size: 8,
                    },
                color:"white",
            },
            grid: {
         // Set the color of the grid lines
      },
      }
    }
  }
}); 



// tabit chart 
// Evaluate f(x) = x^2 for each x value
const tabityValues: number[] = xValues.map(() => 1) as number[]; // y = 1
const tabit = document.getElementById('tabit') as HTMLCanvasElement;
const tabitchart = new Chart(tabit, {
  type: 'line',
  data: {
    labels: xValues,
    datasets: [{
      label: 'y = 1',
      data: tabityValues,
      borderColor: 'rgba(255, 99, 132, 1)',
      borderWidth: 1,
      pointStyle: false,
    }]
  },
  options: {
    plugins: {
      annotation: {
        annotations: {
          line1: {
            type: 'line',
            xMin: 2,
            xMax: 2,
            yMin: 0,
            yMax: 1,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          },line2: {
            type: 'line',
            xMin: 1,
            xMax: 1,
            yMin: 0,
            yMax: 1,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          },
        }
      }
    },
    scales: {
      x: {
        type: 'linear',
        position: { y: 0 },
        min:-5,
        max:5,
        ticks: {
                font: {
                        size: 8,
                    },
                color:"white",
                stepSize:1,
                    
            },
            grid: {
       // Set the color of the grid lines
      },

      },
      y: {
        type: 'linear',
        position: 'center',
        beginAtZero: true,
        min: -5, // Set the minimum value of the y scale
        max: 5, // Set the maximum value of the y scale
        ticks: {
                stepSize: 1,
                font: {
                        size: 8,
                    },
                color:"white",
            },
            grid: {
         // Set the color of the grid lines
      },
      }
    }
  },
});


</script>






